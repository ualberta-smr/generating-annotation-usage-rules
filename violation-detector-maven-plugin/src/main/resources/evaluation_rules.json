{
    "rules": [
        {
            "id": "RestClientInjectRule",
            "specification": "field with annotation \"org.eclipse.microprofile.rest.client.inject.RestClient\" must have annotation \"javax.inject.Inject\" ",
            "is_best_practice": false
        },
        {
            "id": "IncomingBeanRule",
            "specification": "class with method with annotation \"org.eclipse.microprofile.reactive.messaging.Incoming\" must have annotation \"javax.enterprise.context.ApplicationScoped\" ",
            "is_best_practice": false
        },
        {
            "id": "QueryGraphQLApiRule",
            "specification": "class with method with annotation \"org.eclipse.microprofile.graphql.Query\" must have annotation \"org.eclipse.microprofile.graphql.GraphQLApi\" ",
            "is_best_practice": false
        },
        {
            "id": "ClaimInjectRule",
            "specification": "field with annotation \"org.eclipse.microprofile.jwt.Claim\" must have annotation \"javax.inject.Inject\" ",
            "is_best_practice": false
        },
        {
            "id": "HealthHealthCheckRule",
            "specification": "class with annotation \"org.eclipse.microprofile.health.Health\" must have implementation of \"org.eclipse.microprofile.health.HealthCheck\" ",
            "is_best_practice": false
        },
        {
            "id": "MetricRegistryInjectRule",
            "specification": "field with (annotation \"org.eclipse.microprofile.metrics.annotation.RegistryType\" with parameter \"org.eclipse.microprofile.metrics.MetricRegistry.Type type\" and annotation \"javax.inject.Inject\"  ) must have type \"org.eclipse.microprofile.metrics.MetricRegistry\" ",
            "is_best_practice": false
        },
        {
            "id": "MutationGraphQLApiRule",
            "specification": "class with method with annotation \"org.eclipse.microprofile.graphql.Mutation\" must have annotation \"org.eclipse.microprofile.graphql.GraphQLApi\" ",
            "is_best_practice": false
        },
        {
            "id": "ReadinessHealthCheckRule",
            "specification": "class with annotation \"org.eclipse.microprofile.health.Readiness\" must have implementation of \"org.eclipse.microprofile.health.HealthCheck\" ",
            "is_best_practice": false
        },
        {
            "id": "OutgoingBeanRule",
            "specification": "class with method with annotation \"org.eclipse.microprofile.reactive.messaging.Outgoing\" must have annotation \"javax.enterprise.context.ApplicationScoped\" ",
            "is_best_practice": false
        },
        {
            "id": "RegisterRestClientPathRule",
            "specification": "class with annotation \"org.eclipse.microprofile.rest.client.inject.RegisterRestClient\" must have (method with annotation \"javax.ws.rs.Path\"  ) or annotation \"javax.ws.rs.Path\" ",
            "is_best_practice": false
        },
        {
            "id": "LivenessHealthCheckRule",
            "specification": "class with annotation \"org.eclipse.microprofile.health.Liveness\" must have implementation of \"org.eclipse.microprofile.health.HealthCheck\" ",
            "is_best_practice": false
        },
        {
            "id": "ConfigPropertyInjectRule",
            "specification": "field with annotation \"org.eclipse.microprofile.config.inject.ConfigProperty\" must have annotation \"javax.inject.Inject\" ",
            "is_best_practice": false
        }
    ]
}