[
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='Path']])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='Path']])) and ((src:annotation[src:name[text()='RegisterRestClient']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Inject']] and src:annotation[src:name[text()='Claim']])] and src:block/src:function[(src:annotation[src:name[text()='Path']] and src:annotation[src:name[text()='Produces']] and src:annotation[src:name[text()='GET']] and src:annotation[src:name[text()='Traced']])])))]",
        "grammar": "class with (annotation \"Path\" ) must have (annotation \"RegisterRestClient\" and declaration statement with (annotation \"Inject\" and annotation \"Claim\" ) and function with (annotation \"Path\" and annotation \"Produces\" and annotation \"GET\" and annotation \"Traced\" ) ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='Path']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Claim']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='Path']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Claim']])])) and ((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Inject']])])))]",
        "grammar": "class with (annotation \"Path\" and declaration statement with (annotation \"Claim\" ) ) must have (declaration statement with (annotation \"Inject\" ) ) "
    },
    {
        "quantifier": "src:class[(descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='JsonWebToken']] and src:annotation[src:name[text()='Inject']])])]",
        "constraint": "src:class[(((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='JsonWebToken']] and src:annotation[src:name[text()='Inject']])])) and ((src:annotation[src:name[text()='Path']])))]",
        "grammar": "class with (declaration statement with (annotation \"JsonWebToken\" and annotation \"Inject\" ) ) must have (annotation \"Path\" ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='Produces']] and src:annotation[src:name[text()='Path']])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='Produces']] and src:annotation[src:name[text()='Path']])) and ((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Inject']])])))]",
        "grammar": "class with (annotation \"Produces\" and annotation \"Path\" ) must have (declaration statement with (annotation \"Inject\" ) ) "
    },
    {
        "quantifier": "src:class[(descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Claim']] and src:annotation[src:name[text()='Inject']])])]",
        "constraint": "src:class[(((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Claim']] and src:annotation[src:name[text()='Inject']])])) and ((src:annotation[src:name[text()='Path']])))]",
        "grammar": "class with (declaration statement with (annotation \"Claim\" and annotation \"Inject\" ) ) must have (annotation \"Path\" ) "
    },
    {
        "quantifier": "src:class[(descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Inject']])])]",
        "constraint": "src:class[(((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Inject']])])) and ((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='RestClient']] and src:annotation[src:name[text()='Claim']])])))]",
        "grammar": "class with (declaration statement with (annotation \"Inject\" ) ) must have (declaration statement with (annotation \"RestClient\" and annotation \"Claim\" ) ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='Path']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Inject']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='Path']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Inject']])])) and ((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Claim']])])))]",
        "grammar": "class with (annotation \"Path\" and declaration statement with (annotation \"Inject\" ) ) must have (declaration statement with (annotation \"Claim\" ) ) "
    },
    {
        "quantifier": "src:class[(descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Claim']])])]",
        "constraint": "src:class[(((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Claim']])])) and ((src:annotation[src:name[text()='Path']])))]",
        "grammar": "class with (declaration statement with (annotation \"Claim\" ) ) must have (annotation \"Path\" ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='Produces']])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='Produces']])) and ((src:annotation[src:name[text()='Path']])))]",
        "grammar": "class with (annotation \"Produces\" ) must have (annotation \"Path\" ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='Produces']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Inject']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='Produces']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Inject']])])) and ((src:annotation[src:name[text()='Path']])))]",
        "grammar": "class with (annotation \"Produces\" and declaration statement with (annotation \"Inject\" ) ) must have (annotation \"Path\" ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='Path']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='JsonWebToken']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='Path']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='JsonWebToken']])])) and ((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Inject']])])))]",
        "grammar": "class with (annotation \"Path\" and declaration statement with (annotation \"JsonWebToken\" ) ) must have (declaration statement with (annotation \"Inject\" ) ) "
    },
    {
        "quantifier": "src:class[(descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Claim']] and src:annotation[src:name[text()='Inject']])])]",
        "constraint": "src:class[(((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Claim']] and src:annotation[src:name[text()='Inject']])])) and ((src:annotation[src:name[text()='Path']])))]",
        "grammar": "class with (declaration statement with (annotation \"Claim\" and annotation \"Inject\" ) ) must have (annotation \"Path\" ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='Produces']] and src:annotation[src:name[text()='Path']])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='Produces']] and src:annotation[src:name[text()='Path']])) and ((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Inject']])])))]",
        "grammar": "class with (annotation \"Produces\" and annotation \"Path\" ) must have (declaration statement with (annotation \"Inject\" ) ) "
    },
    {
        "quantifier": "src:class[(src:block/src:function[(src:annotation[src:name[text()='GET']])])]",
        "constraint": "src:class[(((src:block/src:function[(src:annotation[src:name[text()='GET']])])) and ((src:annotation[src:name[text()='RegisterRestClient']] and src:block/src:function[(src:annotation[src:name[text()='Path']] and src:annotation[src:name[text()='Produces']] and src:annotation[src:name[text()='Traced']] and src:annotation[src:name[text()='Operation']])])))]",
        "grammar": "class with (function with (annotation \"GET\" ) ) must have (annotation \"RegisterRestClient\" and function with (annotation \"Path\" and annotation \"Produces\" and annotation \"Traced\" and annotation \"Operation\" ) ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='Path']] and src:block/src:function[(src:annotation[src:name[text()='GET']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='Path']] and src:block/src:function[(src:annotation[src:name[text()='GET']])])) and ((src:annotation[src:name[text()='RegisterRestClient']] and src:block/src:function[(src:annotation[src:name[text()='Path']] and src:annotation[src:name[text()='Produces']] and src:annotation[src:name[text()='Traced']])])))]",
        "grammar": "class with (annotation \"Path\" and function with (annotation \"GET\" ) ) must have (annotation \"RegisterRestClient\" and function with (annotation \"Path\" and annotation \"Produces\" and annotation \"Traced\" ) ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='Path']] and src:block/src:function[(src:annotation[src:name[text()='Produces']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='Path']] and src:block/src:function[(src:annotation[src:name[text()='Produces']])])) and ((src:annotation[src:name[text()='RegisterRestClient']] and src:block/src:function[(src:annotation[src:name[text()='Path']] and src:annotation[src:name[text()='GET']] and src:annotation[src:name[text()='Traced']])])))]",
        "grammar": "class with (annotation \"Path\" and function with (annotation \"Produces\" ) ) must have (annotation \"RegisterRestClient\" and function with (annotation \"Path\" and annotation \"GET\" and annotation \"Traced\" ) ) "
    },
    {
        "quantifier": "src:class[(src:block/src:function[(src:annotation[src:name[text()='Path']] and src:annotation[src:name[text()='GET']])])]",
        "constraint": "src:class[(((src:block/src:function[(src:annotation[src:name[text()='Path']] and src:annotation[src:name[text()='GET']])])) and ((src:annotation[src:name[text()='RegisterRestClient']] and src:annotation[src:name[text()='Path']])))]",
        "grammar": "class with (function with (annotation \"Path\" and annotation \"GET\" ) ) must have (annotation \"RegisterRestClient\" and annotation \"Path\" ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='Path']] and src:block/src:function[(src:annotation[src:name[text()='Traced']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='Path']] and src:block/src:function[(src:annotation[src:name[text()='Traced']])])) and ((src:block/src:function[(src:annotation[src:name[text()='Path']] and src:annotation[src:name[text()='Produces']] and src:annotation[src:name[text()='GET']])])))]",
        "grammar": "class with (annotation \"Path\" and function with (annotation \"Traced\" ) ) must have (function with (annotation \"Path\" and annotation \"Produces\" and annotation \"GET\" ) ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='ApplicationScoped']])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='ApplicationScoped']])) and ((src:annotation[src:name[text()='Path']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='ConfigProperty']])] and src:block/src:function[(src:annotation[src:name[text()='Traced']])])))]",
        "grammar": "class with (annotation \"ApplicationScoped\" ) must have (annotation \"Path\" and declaration statement with (annotation \"ConfigProperty\" ) and function with (annotation \"Traced\" ) ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='Path']] and src:block/src:function[(src:annotation[src:name[text()='Path']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='Path']] and src:block/src:function[(src:annotation[src:name[text()='Path']])])) and ((src:annotation[src:name[text()='RegisterRestClient']] and src:block/src:function[(src:annotation[src:name[text()='Response']] and src:annotation[src:name[text()='GET']] and src:annotation[src:name[text()='Traced']] and src:annotation[src:name[text()='Operation']])])))]",
        "grammar": "class with (annotation \"Path\" and function with (annotation \"Path\" ) ) must have (annotation \"RegisterRestClient\" and function with (annotation \"Response\" and annotation \"GET\" and annotation \"Traced\" and annotation \"Operation\" ) ) "
    },
    {
        "quantifier": "src:class[(src:block/src:function[(src:annotation[src:name[text()='Path']] and src:annotation[src:name[text()='Traced']])])]",
        "constraint": "src:class[(((src:block/src:function[(src:annotation[src:name[text()='Path']] and src:annotation[src:name[text()='Traced']])])) and ((src:annotation[src:name[text()='Path']])))]",
        "grammar": "class with (function with (annotation \"Path\" and annotation \"Traced\" ) ) must have (annotation \"Path\" ) "
    },
    {
        "quantifier": "src:class[(src:block/src:function[(src:annotation[src:name[text()='Produces']] and src:annotation[src:name[text()='Traced']])])]",
        "constraint": "src:class[(((src:block/src:function[(src:annotation[src:name[text()='Produces']] and src:annotation[src:name[text()='Traced']])])) and ((src:annotation[src:name[text()='Path']])))]",
        "grammar": "class with (function with (annotation \"Produces\" and annotation \"Traced\" ) ) must have (annotation \"Path\" ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='Path']] and src:block/src:function[(src:annotation[src:name[text()='Traced']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='Path']] and src:block/src:function[(src:annotation[src:name[text()='Traced']])])) and ((src:block/src:function[(src:annotation[src:name[text()='Path']] and src:annotation[src:name[text()='Produces']] and src:annotation[src:name[text()='GET']])])))]",
        "grammar": "class with (annotation \"Path\" and function with (annotation \"Traced\" ) ) must have (function with (annotation \"Path\" and annotation \"Produces\" and annotation \"GET\" ) ) "
    },
    {
        "quantifier": "src:class[(src:block/src:function[(src:annotation[src:name[text()='Produces']] and src:annotation[src:name[text()='GET']])])]",
        "constraint": "src:class[(((src:block/src:function[(src:annotation[src:name[text()='Produces']] and src:annotation[src:name[text()='GET']])])) and ((src:annotation[src:name[text()='RegisterRestClient']] and src:annotation[src:name[text()='Path']])))]",
        "grammar": "class with (function with (annotation \"Produces\" and annotation \"GET\" ) ) must have (annotation \"RegisterRestClient\" and annotation \"Path\" ) "
    },
    {
        "quantifier": "src:class[(src:block/src:function[(src:annotation[src:name[text()='Path']] and src:annotation[src:name[text()='Traced']])])]",
        "constraint": "src:class[(((src:block/src:function[(src:annotation[src:name[text()='Path']] and src:annotation[src:name[text()='Traced']])])) and ((src:annotation[src:name[text()='Path']])))]",
        "grammar": "class with (function with (annotation \"Path\" and annotation \"Traced\" ) ) must have (annotation \"Path\" ) "
    },
    {
        "quantifier": "src:class[(src:block/src:function[(src:annotation[src:name[text()='GET']] and src:annotation[src:name[text()='Traced']])])]",
        "constraint": "src:class[(((src:block/src:function[(src:annotation[src:name[text()='GET']] and src:annotation[src:name[text()='Traced']])])) and ((src:annotation[src:name[text()='Path']])))]",
        "grammar": "class with (function with (annotation \"GET\" and annotation \"Traced\" ) ) must have (annotation \"Path\" ) "
    },
    {
        "quantifier": "src:class[(src:block/src:function[(src:annotation[src:name[text()='Path']] and src:annotation[src:name[text()='GET']])])]",
        "constraint": "src:class[(((src:block/src:function[(src:annotation[src:name[text()='Path']] and src:annotation[src:name[text()='GET']])])) and ((src:annotation[src:name[text()='RegisterRestClient']] and src:annotation[src:name[text()='Path']])))]",
        "grammar": "class with (function with (annotation \"Path\" and annotation \"GET\" ) ) must have (annotation \"RegisterRestClient\" and annotation \"Path\" ) "
    },
    {
        "quantifier": "src:class[(src:block/src:function[(src:annotation[src:name[text()='Path']])])]",
        "constraint": "src:class[(((src:block/src:function[(src:annotation[src:name[text()='Path']])])) and ((src:block/src:function[(src:annotation[src:name[text()='GET']] and src:annotation[src:name[text()='Traced']])])))]",
        "grammar": "class with (function with (annotation \"Path\" ) ) must have (function with (annotation \"GET\" and annotation \"Traced\" ) ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='Path']] and src:block/src:function[(src:annotation[src:name[text()='GET']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='Path']] and src:block/src:function[(src:annotation[src:name[text()='GET']])])) and ((src:annotation[src:name[text()='RegisterRestClient']] and src:block/src:function[(src:annotation[src:name[text()='Path']] and src:annotation[src:name[text()='Produces']] and src:annotation[src:name[text()='Traced']])])))]",
        "grammar": "class with (annotation \"Path\" and function with (annotation \"GET\" ) ) must have (annotation \"RegisterRestClient\" and function with (annotation \"Path\" and annotation \"Produces\" and annotation \"Traced\" ) ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='Path']] and src:block/src:function[(src:annotation[src:name[text()='Path']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='Path']] and src:block/src:function[(src:annotation[src:name[text()='Path']])])) and ((src:annotation[src:name[text()='RegisterRestClient']] and src:block/src:function[(src:annotation[src:name[text()='Response']] and src:annotation[src:name[text()='Produces']] and src:annotation[src:name[text()='GET']] and src:annotation[src:name[text()='Traced']] and src:annotation[src:name[text()='Operation']])])))]",
        "grammar": "class with (annotation \"Path\" and function with (annotation \"Path\" ) ) must have (annotation \"RegisterRestClient\" and function with (annotation \"Response\" and annotation \"Produces\" and annotation \"GET\" and annotation \"Traced\" and annotation \"Operation\" ) ) "
    },
    {
        "quantifier": "src:class[(descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='ConfigProperty']])])]",
        "constraint": "src:class[(((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='ConfigProperty']])])) and ((src:annotation[src:name[text()='ApplicationScoped']] and src:annotation[src:name[text()='HealthCheck']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='String']] and src:annotation[src:name[text()='Inject']])])))]",
        "grammar": "class with (declaration statement with (annotation \"ConfigProperty\" ) ) must have (annotation \"ApplicationScoped\" and annotation \"HealthCheck\" and declaration statement with (annotation \"String\" and annotation \"Inject\" ) ) "
    },
    {
        "quantifier": "src:class[(descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='String']] and src:annotation[src:name[text()='ConfigProperty']] and src:annotation[src:name[text()='Inject']])])]",
        "constraint": "src:class[(((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='String']] and src:annotation[src:name[text()='ConfigProperty']] and src:annotation[src:name[text()='Inject']])])) and ((src:annotation[src:name[text()='ApplicationScoped']] and src:annotation[src:name[text()='HealthCheck']])))]",
        "grammar": "class with (declaration statement with (annotation \"String\" and annotation \"ConfigProperty\" and annotation \"Inject\" ) ) must have (annotation \"ApplicationScoped\" and annotation \"HealthCheck\" ) "
    },
    {
        "quantifier": "src:class[(descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Inject']])])]",
        "constraint": "src:class[(((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Inject']])])) and ((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='String']] and src:annotation[src:name[text()='ConfigProperty']])])))]",
        "grammar": "class with (declaration statement with (annotation \"Inject\" ) ) must have (declaration statement with (annotation \"String\" and annotation \"ConfigProperty\" ) ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='ApplicationScoped']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='ConfigProperty']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='ApplicationScoped']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='ConfigProperty']])])) and ((src:annotation[src:name[text()='HealthCheck']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='String']] and src:annotation[src:name[text()='Inject']])])))]",
        "grammar": "class with (annotation \"ApplicationScoped\" and declaration statement with (annotation \"ConfigProperty\" ) ) must have (annotation \"HealthCheck\" and declaration statement with (annotation \"String\" and annotation \"Inject\" ) ) "
    },
    {
        "quantifier": "src:class[(descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='ConfigProperty']] and src:annotation[src:name[text()='Inject']])])]",
        "constraint": "src:class[(((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='ConfigProperty']] and src:annotation[src:name[text()='Inject']])])) and ((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='String']])])))]",
        "grammar": "class with (declaration statement with (annotation \"ConfigProperty\" and annotation \"Inject\" ) ) must have (declaration statement with (annotation \"String\" ) ) "
    },
    {
        "quantifier": "src:class[(descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='ConfigProperty']])])]",
        "constraint": "src:class[(((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='ConfigProperty']])])) and ((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='String']] and src:annotation[src:name[text()='Inject']])])))]",
        "grammar": "class with (declaration statement with (annotation \"ConfigProperty\" ) ) must have (declaration statement with (annotation \"String\" and annotation \"Inject\" ) ) "
    },
    {
        "quantifier": "src:class[(descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='ConfigProperty']] and src:annotation[src:name[text()='Inject']])])]",
        "constraint": "src:class[(((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='ConfigProperty']] and src:annotation[src:name[text()='Inject']])])) and ((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='String']])])))]",
        "grammar": "class with (declaration statement with (annotation \"ConfigProperty\" and annotation \"Inject\" ) ) must have (declaration statement with (annotation \"String\" ) ) "
    },
    {
        "quantifier": "src:class[(descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='ConfigProperty']] and src:annotation[src:name[text()='Inject']])])]",
        "constraint": "src:class[(((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='ConfigProperty']] and src:annotation[src:name[text()='Inject']])])) and ((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='String']])])))]",
        "grammar": "class with (declaration statement with (annotation \"ConfigProperty\" and annotation \"Inject\" ) ) must have (declaration statement with (annotation \"String\" ) ) "
    },
    {
        "quantifier": "src:class[(descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='String']] and src:annotation[src:name[text()='ConfigProperty']])])]",
        "constraint": "src:class[(((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='String']] and src:annotation[src:name[text()='ConfigProperty']])])) and ((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Inject']])])))]",
        "grammar": "class with (declaration statement with (annotation \"String\" and annotation \"ConfigProperty\" ) ) must have (declaration statement with (annotation \"Inject\" ) ) "
    },
    {
        "quantifier": "src:class[(descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='String']] and src:annotation[src:name[text()='Inject']])])]",
        "constraint": "src:class[(((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='String']] and src:annotation[src:name[text()='Inject']])])) and ((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='ConfigProperty']])])))]",
        "grammar": "class with (declaration statement with (annotation \"String\" and annotation \"Inject\" ) ) must have (declaration statement with (annotation \"ConfigProperty\" ) ) "
    },
    {
        "quantifier": "src:class[(descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='ConfigProperty']])])]",
        "constraint": "src:class[(((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='ConfigProperty']])])) and ((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Inject']])])))]",
        "grammar": "class with (declaration statement with (annotation \"ConfigProperty\" ) ) must have (declaration statement with (annotation \"Inject\" ) ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='ApplicationScoped']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Inject']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='ApplicationScoped']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Inject']])])) and ((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='ConfigProperty']])])))]",
        "grammar": "class with (annotation \"ApplicationScoped\" and declaration statement with (annotation \"Inject\" ) ) must have (declaration statement with (annotation \"ConfigProperty\" ) ) "
    },
    {
        "quantifier": "src:class[(src:block/src:function[(src:annotation[src:name[text()='Produces']])])]",
        "constraint": "src:class[(((src:block/src:function[(src:annotation[src:name[text()='Produces']])])) and ((src:block/src:function[(src:annotation[src:name[text()='Path']] and src:annotation[src:name[text()='Operation']])])))]",
        "grammar": "class with (function with (annotation \"Produces\" ) ) must have (function with (annotation \"Path\" and annotation \"Operation\" ) ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='Path']] and src:block/src:function[(src:annotation[src:name[text()='Response']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='Path']] and src:block/src:function[(src:annotation[src:name[text()='Response']])])) and ((src:block/src:function[(src:annotation[src:name[text()='Path']] and src:annotation[src:name[text()='Operation']])])))]",
        "grammar": "class with (annotation \"Path\" and function with (annotation \"Response\" ) ) must have (function with (annotation \"Path\" and annotation \"Operation\" ) ) "
    },
    {
        "quantifier": "src:class[(src:block/src:function[(src:annotation[src:name[text()='Produces']] and src:annotation[src:name[text()='Path']])])]",
        "constraint": "src:class[(((src:block/src:function[(src:annotation[src:name[text()='Produces']] and src:annotation[src:name[text()='Path']])])) and ((src:annotation[src:name[text()='RegisterRestClient']] and src:annotation[src:name[text()='Path']])))]",
        "grammar": "class with (function with (annotation \"Produces\" and annotation \"Path\" ) ) must have (annotation \"RegisterRestClient\" and annotation \"Path\" ) "
    },
    {
        "quantifier": "src:class[(src:block/src:function[(src:annotation[src:name[text()='Response']])])]",
        "constraint": "src:class[(((src:block/src:function[(src:annotation[src:name[text()='Response']])])) and ((src:annotation[src:name[text()='Path']] and src:block/src:function[(src:annotation[src:name[text()='Path']] and src:annotation[src:name[text()='Operation']])])))]",
        "grammar": "class with (function with (annotation \"Response\" ) ) must have (annotation \"Path\" and function with (annotation \"Path\" and annotation \"Operation\" ) ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='ApplicationScoped']] and src:block/src:function[(src:annotation[src:name[text()='Timeout']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='ApplicationScoped']] and src:block/src:function[(src:annotation[src:name[text()='Timeout']])])) and ((src:block/src:function[(src:annotation[src:name[text()='Fallback']])])))]",
        "grammar": "class with (annotation \"ApplicationScoped\" and function with (annotation \"Timeout\" ) ) must have (function with (annotation \"Fallback\" ) ) "
    },
    {
        "quantifier": "src:class[(src:block/src:function[(src:annotation[src:name[text()='Fallback']] and src:annotation[src:name[text()='CompletionStage']])])]",
        "constraint": "src:class[(((src:block/src:function[(src:annotation[src:name[text()='Fallback']] and src:annotation[src:name[text()='CompletionStage']])])) and ((src:annotation[src:name[text()='Asynchronous']])))]",
        "grammar": "class with (function with (annotation \"Fallback\" and annotation \"CompletionStage\" ) ) must have (annotation \"Asynchronous\" ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='ApplicationScoped']] and src:block/src:function[(src:annotation[src:name[text()='Fallback']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='ApplicationScoped']] and src:block/src:function[(src:annotation[src:name[text()='Fallback']])])) and ((src:block/src:function[(src:annotation[src:name[text()='boolean']])])))]",
        "grammar": "class with (annotation \"ApplicationScoped\" and function with (annotation \"Fallback\" ) ) must have (function with (annotation \"boolean\" ) ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='Asynchronous']] and src:block/src:function[(src:annotation[src:name[text()='CompletionStage']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='Asynchronous']] and src:block/src:function[(src:annotation[src:name[text()='CompletionStage']])])) and ((src:block/src:function[(src:annotation[src:name[text()='Fallback']])])))]",
        "grammar": "class with (annotation \"Asynchronous\" and function with (annotation \"CompletionStage\" ) ) must have (function with (annotation \"Fallback\" ) ) "
    },
    {
        "quantifier": "src:class[(src:block/src:function[(src:annotation[src:name[text()='Retry']])])]",
        "constraint": "src:class[(((src:block/src:function[(src:annotation[src:name[text()='Retry']])])) and ((src:block/src:function[(src:annotation[src:name[text()='Fallback']])])))]",
        "grammar": "class with (function with (annotation \"Retry\" ) ) must have (function with (annotation \"Fallback\" ) ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='Asynchronous']] and src:block/src:function[(src:annotation[src:name[text()='Fallback']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='Asynchronous']] and src:block/src:function[(src:annotation[src:name[text()='Fallback']])])) and ((src:block/src:function[(src:annotation[src:name[text()='CompletionStage']])])))]",
        "grammar": "class with (annotation \"Asynchronous\" and function with (annotation \"Fallback\" ) ) must have (function with (annotation \"CompletionStage\" ) ) "
    },
    {
        "quantifier": "src:class[(src:block/src:function[(src:annotation[src:name[text()='Fallback']])])]",
        "constraint": "src:class[(((src:block/src:function[(src:annotation[src:name[text()='Fallback']])])) and ((src:annotation[src:name[text()='ApplicationScoped']])))]",
        "grammar": "class with (function with (annotation \"Fallback\" ) ) must have (annotation \"ApplicationScoped\" ) "
    },
    {
        "quantifier": "src:class[(src:block/src:function[(src:annotation[src:name[text()='Fallback']] and src:annotation[src:name[text()='Timeout']])])]",
        "constraint": "src:class[(((src:block/src:function[(src:annotation[src:name[text()='Fallback']] and src:annotation[src:name[text()='Timeout']])])) and ((src:annotation[src:name[text()='ApplicationScoped']])))]",
        "grammar": "class with (function with (annotation \"Fallback\" and annotation \"Timeout\" ) ) must have (annotation \"ApplicationScoped\" ) "
    },
    {
        "quantifier": "src:class[(src:block/src:function[(src:annotation[src:name[text()='Incoming']])])]",
        "constraint": "src:class[(((src:block/src:function[(src:annotation[src:name[text()='Incoming']])])) and ((src:annotation[src:name[text()='ApplicationScoped']])))]",
        "grammar": "class with (function with (annotation \"Incoming\" ) ) must have (annotation \"ApplicationScoped\" ) "
    },
    {
        "quantifier": "src:class[(src:block/src:function[(src:annotation[src:name[text()='Outgoing']])])]",
        "constraint": "src:class[(((src:block/src:function[(src:annotation[src:name[text()='Outgoing']])])) and ((src:annotation[src:name[text()='ApplicationScoped']])))]",
        "grammar": "class with (function with (annotation \"Outgoing\" ) ) must have (annotation \"ApplicationScoped\" ) "
    },
    {
        "quantifier": "src:class[(src:block/src:function[(src:annotation[src:name[text()='Incoming']])])]",
        "constraint": "src:class[(((src:block/src:function[(src:annotation[src:name[text()='Incoming']])])) and ((src:annotation[src:name[text()='ApplicationScoped']])))]",
        "grammar": "class with (function with (annotation \"Incoming\" ) ) must have (annotation \"ApplicationScoped\" ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='RegisterRestClient']] and src:block/src:function[(src:annotation[src:name[text()='Path']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='RegisterRestClient']] and src:block/src:function[(src:annotation[src:name[text()='Path']])])) and ((src:annotation[src:name[text()='Path']] and src:block/src:function[(src:annotation[src:name[text()='String']] and src:annotation[src:name[text()='Produces']] and src:annotation[src:name[text()='GET']])])))]",
        "grammar": "class with (annotation \"RegisterRestClient\" and function with (annotation \"Path\" ) ) must have (annotation \"Path\" and function with (annotation \"String\" and annotation \"Produces\" and annotation \"GET\" ) ) "
    },
    {
        "quantifier": "src:class[(src:block/src:function[(src:annotation[src:name[text()='String']] and src:annotation[src:name[text()='Path']])])]",
        "constraint": "src:class[(((src:block/src:function[(src:annotation[src:name[text()='String']] and src:annotation[src:name[text()='Path']])])) and ((src:annotation[src:name[text()='RegisterRestClient']])))]",
        "grammar": "class with (function with (annotation \"String\" and annotation \"Path\" ) ) must have (annotation \"RegisterRestClient\" ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='RegisterRestClient']] and src:annotation[src:name[text()='Path']])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='RegisterRestClient']] and src:annotation[src:name[text()='Path']])) and ((src:block/src:function[(src:annotation[src:name[text()='Path']] and src:annotation[src:name[text()='Produces']] and src:annotation[src:name[text()='GET']])])))]",
        "grammar": "class with (annotation \"RegisterRestClient\" and annotation \"Path\" ) must have (function with (annotation \"Path\" and annotation \"Produces\" and annotation \"GET\" ) ) "
    },
    {
        "quantifier": "src:class[(descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='RestClient']])])]",
        "constraint": "src:class[(((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='RestClient']])])) and ((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Inject']])])))]",
        "grammar": "class with (declaration statement with (annotation \"RestClient\" ) ) must have (declaration statement with (annotation \"Inject\" ) ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='RegisterRestClient']] and src:block/src:function[(src:annotation[src:name[text()='String']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='RegisterRestClient']] and src:block/src:function[(src:annotation[src:name[text()='String']])])) and ((src:block/src:function[(src:annotation[src:name[text()='Path']])])))]",
        "grammar": "class with (annotation \"RegisterRestClient\" and function with (annotation \"String\" ) ) must have (function with (annotation \"Path\" ) ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='RegisterRestClient']] and src:block/src:function[(src:annotation[src:name[text()='GET']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='RegisterRestClient']] and src:block/src:function[(src:annotation[src:name[text()='GET']])])) and ((src:annotation[src:name[text()='Path']] and src:block/src:function[(src:annotation[src:name[text()='Path']] and src:annotation[src:name[text()='Produces']])])))]",
        "grammar": "class with (annotation \"RegisterRestClient\" and function with (annotation \"GET\" ) ) must have (annotation \"Path\" and function with (annotation \"Path\" and annotation \"Produces\" ) ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='RegisterRestClient']] and src:block/src:function[(src:annotation[src:name[text()='Produces']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='RegisterRestClient']] and src:block/src:function[(src:annotation[src:name[text()='Produces']])])) and ((src:annotation[src:name[text()='Path']] and src:block/src:function[(src:annotation[src:name[text()='Path']] and src:annotation[src:name[text()='GET']])])))]",
        "grammar": "class with (annotation \"RegisterRestClient\" and function with (annotation \"Produces\" ) ) must have (annotation \"Path\" and function with (annotation \"Path\" and annotation \"GET\" ) ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='ApplicationScoped']] and src:annotation[src:name[text()='HealthCheck']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='ConfigProperty']] and src:annotation[src:name[text()='Inject']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='ApplicationScoped']] and src:annotation[src:name[text()='HealthCheck']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='ConfigProperty']] and src:annotation[src:name[text()='Inject']])])) and ((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='String']])])))]",
        "grammar": "class with (annotation \"ApplicationScoped\" and annotation \"HealthCheck\" and declaration statement with (annotation \"ConfigProperty\" and annotation \"Inject\" ) ) must have (declaration statement with (annotation \"String\" ) ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='HealthCheck']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='ConfigProperty']] and src:annotation[src:name[text()='Inject']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='HealthCheck']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='ConfigProperty']] and src:annotation[src:name[text()='Inject']])])) and ((src:annotation[src:name[text()='ApplicationScoped']])))]",
        "grammar": "class with (annotation \"HealthCheck\" and declaration statement with (annotation \"ConfigProperty\" and annotation \"Inject\" ) ) must have (annotation \"ApplicationScoped\" ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='ApplicationScoped']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='String']] and src:annotation[src:name[text()='Inject']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='ApplicationScoped']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='String']] and src:annotation[src:name[text()='Inject']])])) and ((src:annotation[src:name[text()='HealthCheck']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='ConfigProperty']])])))]",
        "grammar": "class with (annotation \"ApplicationScoped\" and declaration statement with (annotation \"String\" and annotation \"Inject\" ) ) must have (annotation \"HealthCheck\" and declaration statement with (annotation \"ConfigProperty\" ) ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='ApplicationScoped']] and src:annotation[src:name[text()='Readiness']] and src:annotation[src:name[text()='HealthCheck']])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='ApplicationScoped']] and src:annotation[src:name[text()='Readiness']] and src:annotation[src:name[text()='HealthCheck']])) and ((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Inject']])])))]",
        "grammar": "class with (annotation \"ApplicationScoped\" and annotation \"Readiness\" and annotation \"HealthCheck\" ) must have (declaration statement with (annotation \"Inject\" ) ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='ApplicationScoped']] and src:annotation[src:name[text()='Readiness']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Inject']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='ApplicationScoped']] and src:annotation[src:name[text()='Readiness']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Inject']])])) and ((src:annotation[src:name[text()='HealthCheck']])))]",
        "grammar": "class with (annotation \"ApplicationScoped\" and annotation \"Readiness\" and declaration statement with (annotation \"Inject\" ) ) must have (annotation \"HealthCheck\" ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='ApplicationScoped']] and src:annotation[src:name[text()='HealthCheck']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='String']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='ApplicationScoped']] and src:annotation[src:name[text()='HealthCheck']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='String']])])) and ((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='ConfigProperty']] and src:annotation[src:name[text()='Inject']])])))]",
        "grammar": "class with (annotation \"ApplicationScoped\" and annotation \"HealthCheck\" and declaration statement with (annotation \"String\" ) ) must have (declaration statement with (annotation \"ConfigProperty\" and annotation \"Inject\" ) ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='HealthCheck']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='String']] and src:annotation[src:name[text()='ConfigProperty']] and src:annotation[src:name[text()='Inject']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='HealthCheck']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='String']] and src:annotation[src:name[text()='ConfigProperty']] and src:annotation[src:name[text()='Inject']])])) and ((src:annotation[src:name[text()='ApplicationScoped']])))]",
        "grammar": "class with (annotation \"HealthCheck\" and declaration statement with (annotation \"String\" and annotation \"ConfigProperty\" and annotation \"Inject\" ) ) must have (annotation \"ApplicationScoped\" ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='Liveness']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Inject']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='Liveness']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Inject']])])) and ((src:annotation[src:name[text()='HealthCheck']])))]",
        "grammar": "class with (annotation \"Liveness\" and declaration statement with (annotation \"Inject\" ) ) must have (annotation \"HealthCheck\" ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='ApplicationScoped']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='String']] and src:annotation[src:name[text()='ConfigProperty']] and src:annotation[src:name[text()='Inject']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='ApplicationScoped']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='String']] and src:annotation[src:name[text()='ConfigProperty']] and src:annotation[src:name[text()='Inject']])])) and ((src:annotation[src:name[text()='HealthCheck']])))]",
        "grammar": "class with (annotation \"ApplicationScoped\" and declaration statement with (annotation \"String\" and annotation \"ConfigProperty\" and annotation \"Inject\" ) ) must have (annotation \"HealthCheck\" ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='Readiness']] and src:annotation[src:name[text()='HealthCheck']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Inject']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='Readiness']] and src:annotation[src:name[text()='HealthCheck']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Inject']])])) and ((src:annotation[src:name[text()='ApplicationScoped']])))]",
        "grammar": "class with (annotation \"Readiness\" and annotation \"HealthCheck\" and declaration statement with (annotation \"Inject\" ) ) must have (annotation \"ApplicationScoped\" ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='HealthCheck']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='ConfigProperty']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='HealthCheck']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='ConfigProperty']])])) and ((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Inject']])])))]",
        "grammar": "class with (annotation \"HealthCheck\" and declaration statement with (annotation \"ConfigProperty\" ) ) must have (declaration statement with (annotation \"Inject\" ) ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='ApplicationScoped']] and src:annotation[src:name[text()='Liveness']])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='ApplicationScoped']] and src:annotation[src:name[text()='Liveness']])) and ((src:annotation[src:name[text()='HealthCheck']])))]",
        "grammar": "class with (annotation \"ApplicationScoped\" and annotation \"Liveness\" ) must have (annotation \"HealthCheck\" ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='ApplicationScoped']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='String']] and src:annotation[src:name[text()='ConfigProperty']] and src:annotation[src:name[text()='Inject']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='ApplicationScoped']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='String']] and src:annotation[src:name[text()='ConfigProperty']] and src:annotation[src:name[text()='Inject']])])) and ((src:annotation[src:name[text()='HealthCheck']])))]",
        "grammar": "class with (annotation \"ApplicationScoped\" and declaration statement with (annotation \"String\" and annotation \"ConfigProperty\" and annotation \"Inject\" ) ) must have (annotation \"HealthCheck\" ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='ApplicationScoped']] and src:annotation[src:name[text()='HealthCheck']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='ConfigProperty']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='ApplicationScoped']] and src:annotation[src:name[text()='HealthCheck']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='ConfigProperty']])])) and ((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Inject']])])))]",
        "grammar": "class with (annotation \"ApplicationScoped\" and annotation \"HealthCheck\" and declaration statement with (annotation \"ConfigProperty\" ) ) must have (declaration statement with (annotation \"Inject\" ) ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='ApplicationScoped']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='String']] and src:annotation[src:name[text()='ConfigProperty']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='ApplicationScoped']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='String']] and src:annotation[src:name[text()='ConfigProperty']])])) and ((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Inject']])])))]",
        "grammar": "class with (annotation \"ApplicationScoped\" and declaration statement with (annotation \"String\" and annotation \"ConfigProperty\" ) ) must have (declaration statement with (annotation \"Inject\" ) ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='ApplicationScoped']] and src:annotation[src:name[text()='Health']])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='ApplicationScoped']] and src:annotation[src:name[text()='Health']])) and ((src:annotation[src:name[text()='HealthCheck']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Inject']])])))]",
        "grammar": "class with (annotation \"ApplicationScoped\" and annotation \"Health\" ) must have (annotation \"HealthCheck\" and declaration statement with (annotation \"Inject\" ) ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='Liveness']])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='Liveness']])) and ((src:annotation[src:name[text()='ApplicationScoped']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Inject']])])))]",
        "grammar": "class with (annotation \"Liveness\" ) must have (annotation \"ApplicationScoped\" and declaration statement with (annotation \"Inject\" ) ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='ApplicationScoped']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='ConfigProperty']] and src:annotation[src:name[text()='Inject']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='ApplicationScoped']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='ConfigProperty']] and src:annotation[src:name[text()='Inject']])])) and ((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='String']])])))]",
        "grammar": "class with (annotation \"ApplicationScoped\" and declaration statement with (annotation \"ConfigProperty\" and annotation \"Inject\" ) ) must have (declaration statement with (annotation \"String\" ) ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='ApplicationScoped']] and src:annotation[src:name[text()='HealthCheck']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='String']] and src:annotation[src:name[text()='ConfigProperty']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='ApplicationScoped']] and src:annotation[src:name[text()='HealthCheck']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='String']] and src:annotation[src:name[text()='ConfigProperty']])])) and ((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Inject']])])))]",
        "grammar": "class with (annotation \"ApplicationScoped\" and annotation \"HealthCheck\" and declaration statement with (annotation \"String\" and annotation \"ConfigProperty\" ) ) must have (declaration statement with (annotation \"Inject\" ) ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='ApplicationScoped']] and src:annotation[src:name[text()='HealthCheck']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='ConfigProperty']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='ApplicationScoped']] and src:annotation[src:name[text()='HealthCheck']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='ConfigProperty']])])) and ((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='String']] and src:annotation[src:name[text()='Inject']])])))]",
        "grammar": "class with (annotation \"ApplicationScoped\" and annotation \"HealthCheck\" and declaration statement with (annotation \"ConfigProperty\" ) ) must have (declaration statement with (annotation \"String\" and annotation \"Inject\" ) ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='ApplicationScoped']] and src:annotation[src:name[text()='HealthCheck']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='String']] and src:annotation[src:name[text()='Inject']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='ApplicationScoped']] and src:annotation[src:name[text()='HealthCheck']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='String']] and src:annotation[src:name[text()='Inject']])])) and ((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='ConfigProperty']])])))]",
        "grammar": "class with (annotation \"ApplicationScoped\" and annotation \"HealthCheck\" and declaration statement with (annotation \"String\" and annotation \"Inject\" ) ) must have (declaration statement with (annotation \"ConfigProperty\" ) ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='HealthCheck']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='ConfigProperty']] and src:annotation[src:name[text()='Inject']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='HealthCheck']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='ConfigProperty']] and src:annotation[src:name[text()='Inject']])])) and ((src:annotation[src:name[text()='ApplicationScoped']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='String']])])))]",
        "grammar": "class with (annotation \"HealthCheck\" and declaration statement with (annotation \"ConfigProperty\" and annotation \"Inject\" ) ) must have (annotation \"ApplicationScoped\" and declaration statement with (annotation \"String\" ) ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='HealthCheck']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='String']] and src:annotation[src:name[text()='ConfigProperty']] and src:annotation[src:name[text()='Inject']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='HealthCheck']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='String']] and src:annotation[src:name[text()='ConfigProperty']] and src:annotation[src:name[text()='Inject']])])) and ((src:annotation[src:name[text()='ApplicationScoped']])))]",
        "grammar": "class with (annotation \"HealthCheck\" and declaration statement with (annotation \"String\" and annotation \"ConfigProperty\" and annotation \"Inject\" ) ) must have (annotation \"ApplicationScoped\" ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='Liveness']] and src:annotation[src:name[text()='HealthCheck']])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='Liveness']] and src:annotation[src:name[text()='HealthCheck']])) and ((src:annotation[src:name[text()='ApplicationScoped']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Inject']])])))]",
        "grammar": "class with (annotation \"Liveness\" and annotation \"HealthCheck\" ) must have (annotation \"ApplicationScoped\" and declaration statement with (annotation \"Inject\" ) ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='Health']] and src:annotation[src:name[text()='HealthCheck']])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='Health']] and src:annotation[src:name[text()='HealthCheck']])) and ((src:annotation[src:name[text()='ApplicationScoped']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Inject']])])))]",
        "grammar": "class with (annotation \"Health\" and annotation \"HealthCheck\" ) must have (annotation \"ApplicationScoped\" and declaration statement with (annotation \"Inject\" ) ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='HealthCheck']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='String']] and src:annotation[src:name[text()='ConfigProperty']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='HealthCheck']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='String']] and src:annotation[src:name[text()='ConfigProperty']])])) and ((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Inject']])])))]",
        "grammar": "class with (annotation \"HealthCheck\" and declaration statement with (annotation \"String\" and annotation \"ConfigProperty\" ) ) must have (declaration statement with (annotation \"Inject\" ) ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='ApplicationScoped']] and src:annotation[src:name[text()='HealthCheck']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='String']] and src:annotation[src:name[text()='ConfigProperty']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='ApplicationScoped']] and src:annotation[src:name[text()='HealthCheck']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='String']] and src:annotation[src:name[text()='ConfigProperty']])])) and ((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Inject']])])))]",
        "grammar": "class with (annotation \"ApplicationScoped\" and annotation \"HealthCheck\" and declaration statement with (annotation \"String\" and annotation \"ConfigProperty\" ) ) must have (declaration statement with (annotation \"Inject\" ) ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='Health']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Inject']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='Health']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='Inject']])])) and ((src:annotation[src:name[text()='ApplicationScoped']] and src:annotation[src:name[text()='HealthCheck']])))]",
        "grammar": "class with (annotation \"Health\" and declaration statement with (annotation \"Inject\" ) ) must have (annotation \"ApplicationScoped\" and annotation \"HealthCheck\" ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='ApplicationScoped']] and src:annotation[src:name[text()='HealthCheck']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='ConfigProperty']] and src:annotation[src:name[text()='Inject']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='ApplicationScoped']] and src:annotation[src:name[text()='HealthCheck']] and descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='ConfigProperty']] and src:annotation[src:name[text()='Inject']])])) and ((descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[text()='String']])])))]",
        "grammar": "class with (annotation \"ApplicationScoped\" and annotation \"HealthCheck\" and declaration statement with (annotation \"ConfigProperty\" and annotation \"Inject\" ) ) must have (declaration statement with (annotation \"String\" ) ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='Path']] and src:block/src:function[(src:annotation[src:name[text()='Operation']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='Path']] and src:block/src:function[(src:annotation[src:name[text()='Operation']])])) and ((src:block/src:function[(src:annotation[src:name[text()='Response']] and src:annotation[src:name[text()='Path']])])))]",
        "grammar": "class with (annotation \"Path\" and function with (annotation \"Operation\" ) ) must have (function with (annotation \"Response\" and annotation \"Path\" ) ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='Tag']])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='Tag']])) and ((src:annotation[src:name[text()='Path']])))]",
        "grammar": "class with (annotation \"Tag\" ) must have (annotation \"Path\" ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='Path']])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='Path']])) and ((src:block/src:function[(src:annotation[src:name[text()='Operation']])])))]",
        "grammar": "class with (annotation \"Path\" ) must have (function with (annotation \"Operation\" ) ) "
    },
    {
        "quantifier": "src:class[(src:block/src:function[(src:annotation[src:name[text()='Operation']])])]",
        "constraint": "src:class[(((src:block/src:function[(src:annotation[src:name[text()='Operation']])])) and ((src:annotation[src:name[text()='Path']] and src:block/src:function[(src:annotation[src:name[text()='Produces']] and src:annotation[src:name[text()='GET']])])))]",
        "grammar": "class with (function with (annotation \"Operation\" ) ) must have (annotation \"Path\" and function with (annotation \"Produces\" and annotation \"GET\" ) ) "
    },
    {
        "quantifier": "src:class[(src:block/src:function[(src:annotation[src:name[text()='Response']] and src:annotation[src:name[text()='Operation']])])]",
        "constraint": "src:class[(((src:block/src:function[(src:annotation[src:name[text()='Response']] and src:annotation[src:name[text()='Operation']])])) and ((src:annotation[src:name[text()='Path']])))]",
        "grammar": "class with (function with (annotation \"Response\" and annotation \"Operation\" ) ) must have (annotation \"Path\" ) "
    },
    {
        "quantifier": "src:class[(src:block/src:function[(src:annotation[src:name[text()='Operation']])])]",
        "constraint": "src:class[(((src:block/src:function[(src:annotation[src:name[text()='Operation']])])) and ((src:annotation[src:name[text()='Path']] and src:block/src:function[(src:annotation[src:name[text()='Response']])])))]",
        "grammar": "class with (function with (annotation \"Operation\" ) ) must have (annotation \"Path\" and function with (annotation \"Response\" ) ) "
    },
    {
        "quantifier": "src:class[(src:block/src:function[(src:annotation[src:name[text()='Path']] and src:annotation[src:name[text()='Operation']])])]",
        "constraint": "src:class[(((src:block/src:function[(src:annotation[src:name[text()='Path']] and src:annotation[src:name[text()='Operation']])])) and ((src:annotation[src:name[text()='Path']])))]",
        "grammar": "class with (function with (annotation \"Path\" and annotation \"Operation\" ) ) must have (annotation \"Path\" ) "
    },
    {
        "quantifier": "src:class[(src:block/src:function[(src:annotation[src:name[text()='Operation']])])]",
        "constraint": "src:class[(((src:block/src:function[(src:annotation[src:name[text()='Operation']])])) and ((src:annotation[src:name[text()='Path']] and src:block/src:function[(src:annotation[src:name[text()='Response']])])))]",
        "grammar": "class with (function with (annotation \"Operation\" ) ) must have (annotation \"Path\" and function with (annotation \"Response\" ) ) "
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[text()='Path']] and src:block/src:function[(src:annotation[src:name[text()='Response']])])]",
        "constraint": "src:class[(((src:annotation[src:name[text()='Path']] and src:block/src:function[(src:annotation[src:name[text()='Response']])])) and ((src:block/src:function[(src:annotation[src:name[text()='Path']] and src:annotation[src:name[text()='Operation']])])))]",
        "grammar": "class with (annotation \"Path\" and function with (annotation \"Response\" ) ) must have (function with (annotation \"Path\" and annotation \"Operation\" ) ) "
    },
    {
        "quantifier": "src:class[(src:block/src:function[(src:annotation[src:name[text()='Path']] and src:annotation[src:name[text()='Operation']])])]",
        "constraint": "src:class[(((src:block/src:function[(src:annotation[src:name[text()='Path']] and src:annotation[src:name[text()='Operation']])])) and ((src:annotation[src:name[text()='Path']])))]",
        "grammar": "class with (function with (annotation \"Path\" and annotation \"Operation\" ) ) must have (annotation \"Path\" )"
    }
]
