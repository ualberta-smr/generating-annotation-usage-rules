[
    {
        "id": 1,
        "antecedent": [
            "Method --(annotatedWith)--> Annotation_javax.annotation.security.RolesAllowed"
        ],
        "consequent": [
            "Class --(annotatedWith)--> Annotation_org.eclipse.microprofile.auth.LoginConfig",
            "Class --(extends/implements)--> Application"
        ],
        "label": "correct",
        "comment": "Not supported. The rule is not captured because @RolesAllowed annotates some resource class's method, while @LoginConfig annotates main (driver) class which is completely different and located elsewhere."
    },
    {
        "id": 6,
        "antecedent": [
            "Method --(methodOf)--> Class_A",
            "Method --(returns)--> TypeY",
            "Method --(hasParamList)--> {Type1,Type2,Type3}",
            "Method --(annWith)--> Annotation_org.eclipse.microprofile.faulttolerance.Fallback",
            "Annotation_org.eclipse.microprofile.faulttolerance.Fallback --(hasParam)--> Param_fallbackMethod:java.lang.String",
            "Param_fallbackMethod:java.lang.String --(hasValue)--> X"
        ],
        "consequent": [
            "X --(methodOf)--> Class_A | Super(Class_A)",
            "X --(returns)--> TypeY",
            "X --(hasParamList)--> {Type1,Type2,Type3}"
        ],
        "label": "correct",
        "comment": "Not supported (we don't check if a value of some parameter is another method that adheres to these requirements)"
    },
    {
        "id": 8,
        "antecedent": ["(If) Implementing RestClientBuilder"],
        "consequent": [
            "(Then) Implement RestClientBuilderResolver and provide the implementation of RestClientBuilder in method `newBuilder()`."
        ],
        "label": "correct",
        "comment": "Not supported. We do not analyze method bodies."
    },
    {
        "id": 9,
        "antecedent": ["(If) Using ClientBuilder"],
        "consequent": [
            "(Then) Must call ClientTracingRegistrar.configure(ClientBuilder) to enable tracing"
        ],
        "label": "correct",
        "comment": "Not supported. We do not analyze method bodies."
    },
    {
        "id": 7,
        "antecedent": [
            "Field --(annotatedWith)--> Annotation_org.eclipse.microprofile.config.inject.ConfigProperty",
            "Annotation_org.eclipse.microprofile.config.inject.ConfigProperty --(hasParam)--> Param_name:java.lang.String"
        ],
        "consequent": [
            "Param_name:java.lang.String --(definedIn)--> ConfigFile_microprofile-config.properties OR `value` must be defined in other ConfigSource."
        ],
        "label": "correct",
        "comment": "Supported. We capture this rule partially (we have partially correct candidate rules) because there are other multiple configuration sources."
    },
    {
        "id": 5,
        "antecedent": [
            "Method --(annotatedWith)--> Annotation_org.eclipse.microprofile.faulttolerance.*",
            "Method --(annotatedWith)--> Annotation_org.eclipse.microprofile.faulttolerance.Asynchronous"
        ],
        "consequent": [
            "Method --(hasReturnType)--> java.util.concurrent.CompletionStage"
        ],
        "label": "correct",
        "comment": "Supported. This rule is captured.(by Mansur: this rule is already in the array, and we do not support *)"
    },

    {
        "id": 22,
        "antecedent": [
            "Param_Type --(annotatedWith)--> Annotation_javax.ws.rs.PathParam"
        ],
        "consequent": [
            "Class --(annotatedWith)--> Annotation_javax.ws.rs.Path"
        ],
        "label": "correct",
        "comment": "Supported. The rule is captured, though sometimes it only captures `Method` or `Class` for @Path, but not together."
    },
    {
        "id": 2201,
        "antecedent": [
            "Param_Type --(annotatedWith)--> Annotation_javax.ws.rs.PathParam"
        ],
        "consequent": [
            "Method --(annotatedWith)--> Annotation_javax.ws.rs.Path"
        ],
        "label": "correct",
        "comment": "Supported. The rule is captured, though sometimes it only captures `Method` or `Class` for @Path, but not together."
    }
]
