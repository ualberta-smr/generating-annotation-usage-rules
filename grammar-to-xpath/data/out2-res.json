[
    {
        "quantifier": "src:class[(src:block/src:function[(src:annotation[src:name[(src:name[1][text()='org'] and src:name[2][text()='eclipse'] and src:name[3][text()='microprofile'] and src:name[4][text()='faulttolerance'] and src:name[5][text()='Bulkhead'])]])])]",
        "constraint": "src:class[(src:block/src:function[(src:annotation[src:name[(src:name[1][text()='org'] and src:name[2][text()='eclipse'] and src:name[3][text()='microprofile'] and src:name[4][text()='faulttolerance'] and src:name[5][text()='Bulkhead'])]] and src:annotation[src:name[(src:name[1][text()='org'] and src:name[2][text()='eclipse'] and src:name[3][text()='microprofile'] and src:name[4][text()='faulttolerance'] and src:name[5][text()='Asynchronous'])]])])]",
        "candidate_id": 3,
        "grammar": "class must have (function with (annotation \"org.eclipse.microprofile.faulttolerance.Bulkhead\" and annotation \"org.eclipse.microprofile.faulttolerance.Asynchronous\" ) )"
    },
    {
        "quantifier": "src:class[(src:block/src:function[(src:annotation[src:name[(src:name[1][text()='org'] and src:name[2][text()='eclipse'] and src:name[3][text()='microprofile'] and src:name[4][text()='reactive'] and src:name[5][text()='messaging'] and (src:name[5][text()='Outgoing'] or src:name[5][text()='Incoming']))]])])]",
        "constraint": "src:class[(src:annotation[src:name[(src:name[1][text()='javax'] and src:name[2][text()='enterprise'] and src:name[3][text()='context'] and (src:name[3][text()='ApplicationScoped'] or src:name[3][text()='Dependent']))]] and src:block/src:function[(src:annotation[src:name[(src:name[1][text()='org'] and src:name[2][text()='eclipse'] and src:name[3][text()='microprofile'] and src:name[4][text()='reactive'] and src:name[5][text()='messaging'] and (src:name[5][text()='Outgoing'] or src:name[5][text()='Incoming']))]])])]",
        "candidate_id": 10,
        "grammar": "class must have (annotation \"javax.enterprise.context.<ApplicationScoped,Dependent>\" and function with (annotation \"org.eclipse.microprofile.reactive.messaging.<Outgoing,Incoming>\" ) )"
    },
    {
        "quantifier": "src:class[(src:block/src:function[(src:annotation[src:name[(src:name[1][text()='org'] and src:name[2][text()='eclipse'] and src:name[3][text()='microprofile'] and src:name[4][text()='openapi'] and src:name[5][text()='annotations'] and src:name[6][text()='Operation'])]])])]",
        "constraint": "src:class[(src:block/src:function[(src:annotation[src:name[(src:name[1][text()='org'] and src:name[2][text()='eclipse'] and src:name[3][text()='microprofile'] and src:name[4][text()='openapi'] and src:name[5][text()='annotations'] and src:name[6][text()='Operation'])]] and src:annotation[src:name[(src:name[1][text()='javax'] and src:name[2][text()='ws'] and src:name[3][text()='rs'] and src:name[4][text()='Path'])]])])]",
        "candidate_id": 11,
        "grammar": "class must have (function with (annotation \"org.eclipse.microprofile.openapi.annotations.Operation\" and annotation \"javax.ws.rs.Path\" ) )"
    },
    {
        "quantifier": "src:class[(src:block/src:function[(src:annotation[src:name[(src:name[1][text()='org'] and src:name[2][text()='eclipse'] and src:name[3][text()='microprofile'] and src:name[4][text()='openapi'] and src:name[5][text()='annotations'] and src:name[6][text()='Operation'])]])])]",
        "constraint": "src:class[(src:annotation[src:name[(src:name[1][text()='javax'] and src:name[2][text()='ws'] and src:name[3][text()='rs'] and src:name[4][text()='Path'])]] and src:block/src:function[(src:annotation[src:name[(src:name[1][text()='org'] and src:name[2][text()='eclipse'] and src:name[3][text()='microprofile'] and src:name[4][text()='openapi'] and src:name[5][text()='annotations'] and src:name[6][text()='Operation'])]])])]",
        "candidate_id": 1101,
        "grammar": "class must have (annotation \"javax.ws.rs.Path\" and function with (annotation \"org.eclipse.microprofile.openapi.annotations.Operation\" ) )"
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[(src:name[1][text()='org'] and src:name[2][text()='eclipse'] and src:name[3][text()='microprofile'] and src:name[4][text()='openapi'] and src:name[5][text()='annotations'] and src:name[6][text()='tags'] and src:name[7][text()='Tag'])]])]",
        "constraint": "src:class[(src:annotation[src:name[(src:name[1][text()='org'] and src:name[2][text()='eclipse'] and src:name[3][text()='microprofile'] and src:name[4][text()='openapi'] and src:name[5][text()='annotations'] and src:name[6][text()='tags'] and src:name[7][text()='Tag'])]] and src:block/src:function[(src:annotation[src:name[(src:name[1][text()='javax'] and src:name[2][text()='ws'] and src:name[3][text()='rs'] and src:name[4][text()='Path'])]])])]",
        "candidate_id": 13,
        "grammar": "class must have (annotation \"org.eclipse.microprofile.openapi.annotations.tags.Tag\" and function with (annotation \"javax.ws.rs.Path\" ) )"
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[(src:name[1][text()='org'] and src:name[2][text()='eclipse'] and src:name[3][text()='microprofile'] and src:name[4][text()='openapi'] and src:name[5][text()='annotations'] and src:name[6][text()='tags'] and src:name[7][text()='Tag'])]])]",
        "constraint": "src:class[(src:annotation[src:name[(src:name[1][text()='org'] and src:name[2][text()='eclipse'] and src:name[3][text()='microprofile'] and src:name[4][text()='openapi'] and src:name[5][text()='annotations'] and src:name[6][text()='tags'] and src:name[7][text()='Tag'])]] and src:annotation[src:name[(src:name[1][text()='javax'] and src:name[2][text()='ws'] and src:name[3][text()='rs'] and src:name[4][text()='Path'])]])]",
        "candidate_id": 1301,
        "grammar": "class must have (annotation \"org.eclipse.microprofile.openapi.annotations.tags.Tag\" and annotation \"javax.ws.rs.Path\" )"
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[(src:name[1][text()='org'] and src:name[2][text()='eclipse'] and src:name[3][text()='microprofile'] and src:name[4][text()='rest'] and src:name[5][text()='client'] and src:name[6][text()='inject'] and src:name[7][text()='RegisterRestClient'])]])]",
        "constraint": "src:class[(src:annotation[src:name[(src:name[1][text()='org'] and src:name[2][text()='eclipse'] and src:name[3][text()='microprofile'] and src:name[4][text()='rest'] and src:name[5][text()='client'] and src:name[6][text()='inject'] and src:name[7][text()='RegisterRestClient'])]] and src:block/src:function[(src:annotation[src:name[(src:name[1][text()='javax'] and src:name[2][text()='ws'] and src:name[3][text()='rs'] and src:name[4][text()='Path'])]])])]",
        "candidate_id": 14,
        "grammar": "class must have (annotation \"org.eclipse.microprofile.rest.client.inject.RegisterRestClient\" and function with (annotation \"javax.ws.rs.Path\" ) )"
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[(src:name[1][text()='org'] and src:name[2][text()='eclipse'] and src:name[3][text()='microprofile'] and src:name[4][text()='rest'] and src:name[5][text()='client'] and src:name[6][text()='inject'] and src:name[7][text()='RegisterRestClient'])]])]",
        "constraint": "src:class[(src:annotation[src:name[(src:name[1][text()='org'] and src:name[2][text()='eclipse'] and src:name[3][text()='microprofile'] and src:name[4][text()='rest'] and src:name[5][text()='client'] and src:name[6][text()='inject'] and src:name[7][text()='RegisterRestClient'])]] and src:annotation[src:name[(src:name[1][text()='javax'] and src:name[2][text()='ws'] and src:name[3][text()='rs'] and src:name[4][text()='Path'])]])]",
        "candidate_id": 1401,
        "grammar": "class must have (annotation \"org.eclipse.microprofile.rest.client.inject.RegisterRestClient\" and annotation \"javax.ws.rs.Path\" )"
    },
    {
        "quantifier": "src:class[(descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[(src:name[1][text()='org'] and src:name[2][text()='eclipse'] and src:name[3][text()='microprofile'] and src:name[4][text()='jwt'] and src:name[5][text()='Claim'])]])])]",
        "constraint": "src:class[(descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[(src:name[1][text()='org'] and src:name[2][text()='eclipse'] and src:name[3][text()='microprofile'] and src:name[4][text()='jwt'] and src:name[5][text()='Claim'])]] and src:annotation[src:name[(src:name[1][text()='javax'] and src:name[2][text()='inject'] and src:name[3][text()='Inject'])]])])]",
        "candidate_id": 18,
        "grammar": "class must have (declaration statement with (annotation \"org.eclipse.microprofile.jwt.Claim\" and annotation \"javax.inject.Inject\" ) )"
    },
    {
        "quantifier": "src:class[(descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[(src:name[1][text()='org'] and src:name[2][text()='eclipse'] and src:name[3][text()='microprofile'] and src:name[4][text()='rest'] and src:name[5][text()='client'] and src:name[6][text()='inject'] and src:name[7][text()='RestClient'])]])])]",
        "constraint": "src:class[(descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[(src:name[1][text()='org'] and src:name[2][text()='eclipse'] and src:name[3][text()='microprofile'] and src:name[4][text()='rest'] and src:name[5][text()='client'] and src:name[6][text()='inject'] and src:name[7][text()='RestClient'])]] and src:annotation[src:name[(src:name[1][text()='javax'] and src:name[2][text()='inject'] and src:name[3][text()='Inject'])]])])]",
        "candidate_id": 19,
        "grammar": "class must have (declaration statement with (annotation \"org.eclipse.microprofile.rest.client.inject.RestClient\" and annotation \"javax.inject.Inject\" ) )"
    },
    {
        "quantifier": "src:class[(descendant-or-self::src:decl_stmt/src:decl[(src:type[src:name[(src:name[1][text()='org'] and src:name[2][text()='eclipse'] and src:name[3][text()='microprofile'] and src:name[4][text()='jwt'] and src:name[5][text()='JsonWebToken'])]])])]",
        "constraint": "src:class[(descendant-or-self::src:decl_stmt/src:decl[(src:annotation[src:name[(src:name[1][text()='javax'] and src:name[2][text()='inject'] and src:name[3][text()='Inject'])]] and src:type[src:name[(src:name[1][text()='org'] and src:name[2][text()='eclipse'] and src:name[3][text()='microprofile'] and src:name[4][text()='jwt'] and src:name[5][text()='JsonWebToken'])]])])]",
        "candidate_id": 20,
        "grammar": "class must have (declaration statement with (annotation \"javax.inject.Inject\" and type \"org.eclipse.microprofile.jwt.JsonWebToken\" ) )"
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[(src:name[1][text()='javax'] and src:name[2][text()='ws'] and src:name[3][text()='rs'] and (src:name[3][text()='Produces'] or src:name[3][text()='Consumes'] or src:name[3][text()='GET'] or src:name[3][text()='POST'] or src:name[3][text()='PUT'] or src:name[3][text()='DELETE'] or src:name[3][text()='UPDATE']))]])]",
        "constraint": "src:class[(src:annotation[src:name[(src:name[1][text()='javax'] and src:name[2][text()='ws'] and src:name[3][text()='rs'] and (src:name[3][text()='Produces'] or src:name[3][text()='Consumes'] or src:name[3][text()='GET'] or src:name[3][text()='POST'] or src:name[3][text()='PUT'] or src:name[3][text()='DELETE'] or src:name[3][text()='UPDATE']))]] and src:annotation[src:name[(src:name[1][text()='javax'] and src:name[2][text()='ws'] and src:name[3][text()='rs'] and src:name[4][text()='Path'])]])]",
        "candidate_id": 21,
        "grammar": "class must have (annotation \"javax.ws.rs.<Produces,Consumes,GET,POST,PUT,DELETE,UPDATE>\" and annotation \"javax.ws.rs.Path\" )"
    },
    {
        "quantifier": "src:class[(src:annotation[src:name[(src:name[1][text()='javax'] and src:name[2][text()='ws'] and src:name[3][text()='rs'] and (src:name[3][text()='Produces'] or src:name[3][text()='Consumes'] or src:name[3][text()='GET'] or src:name[3][text()='POST'] or src:name[3][text()='PUT'] or src:name[3][text()='DELETE'] or src:name[3][text()='UPDATE']))]])]",
        "constraint": "src:class[(src:annotation[src:name[(src:name[1][text()='javax'] and src:name[2][text()='ws'] and src:name[3][text()='rs'] and (src:name[3][text()='Produces'] or src:name[3][text()='Consumes'] or src:name[3][text()='GET'] or src:name[3][text()='POST'] or src:name[3][text()='PUT'] or src:name[3][text()='DELETE'] or src:name[3][text()='UPDATE']))]] and src:block/src:function[(src:annotation[src:name[(src:name[1][text()='javax'] and src:name[2][text()='ws'] and src:name[3][text()='rs'] and src:name[4][text()='Path'])]])])]",
        "candidate_id": 2101,
        "grammar": "class must have (annotation \"javax.ws.rs.<Produces,Consumes,GET,POST,PUT,DELETE,UPDATE>\" and function with (annotation \"javax.ws.rs.Path\" ) )"
    },
    {
        "quantifier": "src:class[(src:block/src:function[(src:annotation[src:name[(src:name[1][text()='javax'] and src:name[2][text()='ws'] and src:name[3][text()='rs'] and (src:name[3][text()='Produces'] or src:name[3][text()='Consumes'] or src:name[3][text()='GET'] or src:name[3][text()='POST'] or src:name[3][text()='PUT'] or src:name[3][text()='DELETE'] or src:name[3][text()='UPDATE']))]])])]",
        "constraint": "src:class[(src:annotation[src:name[(src:name[1][text()='javax'] and src:name[2][text()='ws'] and src:name[3][text()='rs'] and src:name[4][text()='Path'])]] and src:block/src:function[(src:annotation[src:name[(src:name[1][text()='javax'] and src:name[2][text()='ws'] and src:name[3][text()='rs'] and (src:name[3][text()='Produces'] or src:name[3][text()='Consumes'] or src:name[3][text()='GET'] or src:name[3][text()='POST'] or src:name[3][text()='PUT'] or src:name[3][text()='DELETE'] or src:name[3][text()='UPDATE']))]])])]",
        "candidate_id": 2102,
        "grammar": "class must have (annotation \"javax.ws.rs.Path\" and function with (annotation \"javax.ws.rs.<Produces,Consumes,GET,POST,PUT,DELETE,UPDATE>\" ) )"
    },
    {
        "quantifier": "src:class[(src:block/src:function[(src:annotation[src:name[(src:name[1][text()='javax'] and src:name[2][text()='ws'] and src:name[3][text()='rs'] and (src:name[3][text()='Produces'] or src:name[3][text()='Consumes'] or src:name[3][text()='GET'] or src:name[3][text()='POST'] or src:name[3][text()='PUT'] or src:name[3][text()='DELETE'] or src:name[3][text()='UPDATE']))]])])]",
        "constraint": "src:class[(src:block/src:function[(src:annotation[src:name[(src:name[1][text()='javax'] and src:name[2][text()='ws'] and src:name[3][text()='rs'] and (src:name[3][text()='Produces'] or src:name[3][text()='Consumes'] or src:name[3][text()='GET'] or src:name[3][text()='POST'] or src:name[3][text()='PUT'] or src:name[3][text()='DELETE'] or src:name[3][text()='UPDATE']))]] and src:annotation[src:name[(src:name[1][text()='javax'] and src:name[2][text()='ws'] and src:name[3][text()='rs'] and src:name[4][text()='Path'])]])])]",
        "candidate_id": 2103,
        "grammar": "class must have (function with (annotation \"javax.ws.rs.<Produces,Consumes,GET,POST,PUT,DELETE,UPDATE>\" and annotation \"javax.ws.rs.Path\" ) )"
    },
    {
        "quantifier": "src:class[(src:block/src:function[(src:annotation[src:name[(src:name[1][text()='org'] and src:name[2][text()='eclipse'] and src:name[3][text()='microprofile'] and src:name[4][text()='graphql'] and (src:name[4][text()='Mutation'] or src:name[4][text()='Query']))]])])]",
        "constraint": "src:class[(src:annotation[src:name[(src:name[1][text()='org'] and src:name[2][text()='eclipse'] and src:name[3][text()='microprofile'] and src:name[4][text()='graphql'] and src:name[5][text()='GraphQLApi'])]] and src:block/src:function[(src:annotation[src:name[(src:name[1][text()='org'] and src:name[2][text()='eclipse'] and src:name[3][text()='microprofile'] and src:name[4][text()='graphql'] and (src:name[4][text()='Mutation'] or src:name[4][text()='Query']))]])])]",
        "candidate_id": 23,
        "grammar": "class must have (annotation \"org.eclipse.microprofile.graphql.GraphQLApi\" and function with (annotation \"org.eclipse.microprofile.graphql.<Mutation,Query>\" ) )"
    }
]
